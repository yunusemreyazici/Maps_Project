{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/Role/RolePage.ts", "../../../../../Modules/Administration/Role/RoleGrid.ts", "../../../../../Modules/Administration/Role/RoleDialog.ts", "../../../../../Modules/Administration/RolePermission/RolePermissionDialog.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from \"@serenity-is/corelib\"\nimport { RoleGrid } from \"./RoleGrid\";\n\nexport default function pageInit() {\n    initFullHeightGridPage(new RoleGrid($('#GridDiv')).element);\n}", "import { RoleColumns, RoleRow, RoleService } from \"@/ServerTypes/Administration\";\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\nimport { RoleDialog } from \"./RoleDialog\";\n\n@Decorators.registerClass('Maps_Project.Administration.RoleGrid')\nexport class RoleGrid extends EntityGrid<RoleRow, any> {\n    protected getColumnsKey() { return RoleColumns.columnsKey; }\n    protected getDialogType() { return RoleDialog; }\n    protected getRowDefinition() { return RoleRow; }\n    protected getService() { return RoleService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getDefaultSortBy() {\n        return [RoleRow.Fields.RoleName];\n    }\n}", "import { RoleForm, RoleRow, RoleService } from \"@/ServerTypes/Administration\";\nimport { Texts } from \"@/ServerTypes/Texts\";\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\nimport { RolePermissionDialog } from \"../RolePermission/RolePermissionDialog\";\n\nconst editPermissions = \"edit-permissions\";\n\n@Decorators.registerClass('Maps_Project.Administration.RoleDialog')\nexport class RoleDialog extends EntityDialog<RoleRow, any> {\n    protected getFormKey() { return RoleForm.formKey; }\n    protected getRowDefinition() { return RoleRow; }\n    protected getService() { return RoleService.baseUrl; }\n\n    protected form = new RoleForm(this.idPrefix);\n\n    protected getToolbarButtons()\n    {\n        let buttons = super.getToolbarButtons();\n\n        buttons.push({\n            title: Texts.Site.RolePermissionDialog.EditButton,\n            cssClass: editPermissions,\n            icon: 'fa-lock text-green',\n            onClick: () =>\n            {\n                new RolePermissionDialog({\n                    roleID: this.entity.RoleId,\n                    title: this.entity.RoleName\n                }).dialogOpen();\n            }\n        });\n\n        return buttons;\n    }\n\n    protected updateInterface() {\n        super.updateInterface();\n\n        this.toolbar.findButton(editPermissions).toggleClass(\"disabled\", this.isNewOrDeleted());\n    }\n}", "import { RolePermissionService, UserPermissionRow } from \"@/ServerTypes/Administration\";\nimport { TemplatedDialog, format, getRemoteData, localText, notifySuccess } from \"@serenity-is/corelib\";\nimport { PermissionCheckEditor } from \"../UserPermission/PermissionCheckEditor\";\n\nexport class RolePermissionDialog extends TemplatedDialog<RolePermissionDialogOptions> {\n\n    private permissions: PermissionCheckEditor;\n\n    constructor(opt: RolePermissionDialogOptions) {\n        super(opt);\n\n        this.permissions = new PermissionCheckEditor(this.byId('Permissions'), {\n            showRevoke: false\n        });\n\n        RolePermissionService.List({\n            RoleID: this.options.roleID,\n            Module: null,\n            Submodule: null\n        }, response => {\n            this.permissions.value = response.Entities.map(x => (<UserPermissionRow>{ PermissionKey: x }));\n        });\n\n        this.permissions.implicitPermissions = getRemoteData('Administration.ImplicitPermissions');\n    }\n\n    protected getDialogOptions(): JQueryUI.DialogOptions {\n        let opt = super.getDialogOptions();\n\n        opt.buttons = [\n            {\n                text: localText('Dialogs.OkButton'),\n                click: e => {\n                    RolePermissionService.Update({\n                        RoleID: this.options.roleID,\n                        Permissions: this.permissions.value.map(x => x.PermissionKey),\n                        Module: null,\n                        Submodule: null\n                    }, response => {\n                        this.dialogClose();\n                        window.setTimeout(() => notifySuccess(localText('Site.RolePermissionDialog.SaveSuccess')), 0);\n                    });\n                }\n            }, {\n                text: localText('Dialogs.CancelButton'),\n                click: () => this.dialogClose()\n            }];\n\n        opt.title = format(localText('Site.RolePermissionDialog.DialogTitle'),\n            this.options.title);\n\n        return opt;\n    }\n\n    protected getTemplate(): string {\n        return '<div id=\"~_Permissions\"></div>';\n    }\n}\n\nexport interface RolePermissionDialogOptions {\n    roleID?: number;\n    title?: string;\n}"],
  "mappings": "wQAAA,IAAAA,EAAuC,SCCvC,IAAAC,EAAuC,SCCvC,IAAAC,EAAyC,SCDzC,IAAAC,EAAiF,SAG1E,IAAMC,EAAN,cAAmC,iBAA6C,CAInF,YAAYC,EAAkC,CAC1C,MAAMA,CAAG,EAET,KAAK,YAAc,IAAIC,EAAsB,KAAK,KAAK,aAAa,EAAG,CACnE,WAAY,EAChB,CAAC,EAEDC,EAAsB,KAAK,CACvB,OAAQ,KAAK,QAAQ,OACrB,OAAQ,KACR,UAAW,IACf,EAAGC,GAAY,CACX,KAAK,YAAY,MAAQA,EAAS,SAAS,IAAIC,IAAyB,CAAE,cAAeA,CAAE,EAAE,CACjG,CAAC,EAED,KAAK,YAAY,uBAAsB,iBAAc,oCAAoC,CAC7F,CAEU,kBAA2C,CACjD,IAAIJ,EAAM,MAAM,iBAAiB,EAEjC,OAAAA,EAAI,QAAU,CACV,CACI,QAAM,aAAU,kBAAkB,EAClC,MAAOK,GAAK,CACRH,EAAsB,OAAO,CACzB,OAAQ,KAAK,QAAQ,OACrB,YAAa,KAAK,YAAY,MAAM,IAAIE,GAAKA,EAAE,aAAa,EAC5D,OAAQ,KACR,UAAW,IACf,EAAGD,GAAY,CACX,KAAK,YAAY,EACjB,OAAO,WAAW,OAAM,oBAAc,aAAU,uCAAuC,CAAC,EAAG,CAAC,CAChG,CAAC,CACL,CACJ,EAAG,CACC,QAAM,aAAU,sBAAsB,EACtC,MAAO,IAAM,KAAK,YAAY,CAClC,CAAC,EAELH,EAAI,SAAQ,aAAO,aAAU,uCAAuC,EAChE,KAAK,QAAQ,KAAK,EAEfA,CACX,CAEU,aAAsB,CAC5B,MAAO,gCACX,CACJ,EArDaM,EAAAP,EAAA,wBDCb,IAAMQ,EAAkB,mBAGXC,EAAN,cAAyB,cAA2B,CAApD,kCAKH,KAAU,KAAO,IAAIC,EAAS,KAAK,QAAQ,EAJjC,YAAa,CAAE,OAAOA,EAAS,OAAS,CACxC,kBAAmB,CAAE,OAAOC,CAAS,CACrC,YAAa,CAAE,OAAOC,EAAY,OAAS,CAI3C,mBACV,CACI,IAAIC,EAAU,MAAM,kBAAkB,EAEtC,OAAAA,EAAQ,KAAK,CACT,MAAOC,EAAM,KAAK,qBAAqB,WACvC,SAAUN,EACV,KAAM,qBACN,QAAS,IACT,CACI,IAAIO,EAAqB,CACrB,OAAQ,KAAK,OAAO,OACpB,MAAO,KAAK,OAAO,QACvB,CAAC,EAAE,WAAW,CAClB,CACJ,CAAC,EAEMF,CACX,CAEU,iBAAkB,CACxB,MAAM,gBAAgB,EAEtB,KAAK,QAAQ,WAAWL,CAAe,EAAE,YAAY,WAAY,KAAK,eAAe,CAAC,CAC1F,CACJ,EAhCaQ,EAAAP,EAAA,cAAAA,EAANQ,EAAA,CADN,aAAW,cAAc,wCAAwC,GACrDR,GDHN,IAAMS,EAAN,cAAuB,YAAyB,CACzC,eAAgB,CAAE,OAAOC,EAAY,UAAY,CACjD,eAAgB,CAAE,OAAOC,CAAY,CACrC,kBAAmB,CAAE,OAAOC,CAAS,CACrC,YAAa,CAAE,OAAOC,EAAY,OAAS,CAErD,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAEU,kBAAmB,CACzB,MAAO,CAACF,EAAQ,OAAO,QAAQ,CACnC,CACJ,EAbaG,EAAAN,EAAA,YAAAA,EAANO,EAAA,CADN,aAAW,cAAc,sCAAsC,GACnDP,GDFE,SAARQ,GAA4B,IAC/B,0BAAuB,IAAIC,EAAS,EAAE,UAAU,CAAC,EAAE,OAAO,CAC9D,CAFwBC,EAAAF,EAAA",
  "names": ["import_corelib", "import_corelib", "import_corelib", "import_corelib", "RolePermissionDialog", "opt", "PermissionCheckEditor", "RolePermissionService", "response", "x", "e", "__name", "editPermissions", "RoleDialog", "RoleForm", "RoleRow", "RoleService", "buttons", "Texts", "RolePermissionDialog", "__name", "__decorateClass", "RoleGrid", "RoleColumns", "RoleDialog", "RoleRow", "RoleService", "container", "__name", "__decorateClass", "pageInit", "RoleGrid", "__name"]
}
