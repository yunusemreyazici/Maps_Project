{
  "version": 3,
  "sources": ["../../../../../../Modules/Membership/Account/SignUp/SignUpPage.tsx"],
  "sourcesContent": ["/** @jsxImportSource jsx-dom */\nimport { SignUpForm, SignupPageModel, SignUpRequest } from \"@/ServerTypes/Membership\";\nimport { SignUpResponse } from \"@/ServerTypes/Membership/SignUpResponse\";\nimport { Texts } from \"@/ServerTypes/Texts\";\nimport { PropertyPanel } from \"@serenity-is/corelib\";\nimport { deepClone, informationDialog, resolveUrl, serviceCall } from \"@serenity-is/corelib\";\nimport { AccountPanelTitle } from \"../AccountPanelTitle\";\n\nexport default function pageInit(opt: SignupPageModel) {\n    new SignUpPanel($('#SignUpPanel'), opt);\n}\n\nconst myTexts = Texts.Forms.Membership.SignUp;\n\nclass SignUpPanel extends PropertyPanel<SignUpRequest, SignupPageModel> {\n\n    protected getFormKey() { return SignUpForm.formKey; }\n\n    private form: SignUpForm;\n\n    constructor(container: JQuery, opt: SignupPageModel) {\n        super(container, opt);\n\n        this.form = new SignUpForm(this.idPrefix);\n\n        this.form.Email.element.attr(\"autocomplete\", \"off\");\n        this.form.Password.element.attr(\"autocomplete\", \"new-password\");\n\n        this.form.ConfirmEmail.addValidationRule(this.uniqueName, e => {\n            if (this.form.ConfirmEmail.value !== this.form.Email.value) {\n                return Texts.Validation.EmailConfirm;\n            }\n        });\n\n        this.form.ConfirmPassword.addValidationRule(this.uniqueName, e => {\n            if (this.form.ConfirmPassword.value !== this.form.Password.value) {\n                return Texts.Validation.PasswordConfirmMismatch;\n            }\n        });\n\n        if (this.options.ExternalProviderToken) {\n            this.form.DisplayName.value = this.options.DisplayName;\n            this.form.Email.value = this.options.Email;\n            this.form.ConfirmEmail.value = this.options.Email;\n            this.byId(\"FormInfo\").text(myTexts.ConfirmDetails);\n        }\n    }\n\n    override getPropertyItems() {\n        var items = super.getPropertyItems();\n        if (this.options.ExternalProviderToken) {\n            var items = deepClone(items);\n            for (var x of items.filter(x => x.name == \"Password\" || x.name == \"ConfirmPassword\")) {\n                x.visible = false;\n            }\n        }\n        return items;\n    }\n\n    submitClick() {\n        if (!this.validateForm()) {\n            return;\n        }\n\n        var request = this.propertyGrid.save();\n        delete request.ConfirmEmail;\n        delete request.ConfirmPassword;\n\n        serviceCall({\n            url: resolveUrl('~/Account/SignUp'),\n            request: { ...request, ExternalProviderToken: this.options.ExternalProviderToken },\n            onSuccess: (response: SignUpResponse) => {\n                if (response.DemoActivationLink) {\n                    informationDialog(\"You would normally receive an e-mail with instructions to active your account now.\\n\\n\" +\n                        \"But as this is a DEMO, you'll be redirected to the activation page automatically. \", () => {\n                        window.location.href = resolveUrl(response.DemoActivationLink);\n                    });\n\n                    return;\n                }\n\n                if (response.NeedsActivation) {\n                    informationDialog(myTexts.Success, () => {\n                        window.location.href = resolveUrl('~/');\n                    });\n                }\n                else {\n                    window.location.href = resolveUrl('~/');\n                }\n            }\n        });\n    }\n\n    renderContents() {\n        const id = this.useIdPrefix();\n        this.element.empty().append(<>\n            <AccountPanelTitle />\n\n            <div class=\"s-Panel p-4\">\n                <h5 class=\"text-center my-4\">{myTexts.FormTitle}</h5>\n                <p id={id.FormInfo} class=\"text-center\">{myTexts.FormInfo}</p>\n\n                <form id={id.Form} action=\"\" autoComplete=\"off\">\n                    <input autoComplete=\"false\" name=\"hidden\" type=\"text\" style=\"display:none;\" />\n                    <div id={id.PropertyGrid}></div>\n                    <div class=\"px-field\">\n                        <button id={id.SubmitButton} type=\"submit\" class=\"btn btn-primary my-4 w-100\"\n                                onClick={e => { e.preventDefault(); this.submitClick(); }}>\n                            {myTexts.SubmitButton}\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </>)\n    }\n}\n"],
  "mappings": "+NAIA,IAAAA,EAA8B,SAC9BA,EAAsE,SAGvD,SAARC,EAA0BC,EAAsB,CACnD,IAAIC,EAAY,EAAE,cAAc,EAAGD,CAAG,CAC1C,CAFwBE,EAAAH,EAAA,YAIxB,IAAMI,EAAUC,EAAM,MAAM,WAAW,OAEjCH,EAAN,cAA0B,eAA8C,CAMpE,YAAYI,EAAmBL,EAAsB,CACjD,MAAMK,EAAWL,CAAG,EAEpB,KAAK,KAAO,IAAIM,EAAW,KAAK,QAAQ,EAExC,KAAK,KAAK,MAAM,QAAQ,KAAK,eAAgB,KAAK,EAClD,KAAK,KAAK,SAAS,QAAQ,KAAK,eAAgB,cAAc,EAE9D,KAAK,KAAK,aAAa,kBAAkB,KAAK,WAAYC,GAAK,CAC3D,GAAI,KAAK,KAAK,aAAa,QAAU,KAAK,KAAK,MAAM,MACjD,OAAOH,EAAM,WAAW,YAEhC,CAAC,EAED,KAAK,KAAK,gBAAgB,kBAAkB,KAAK,WAAYG,GAAK,CAC9D,GAAI,KAAK,KAAK,gBAAgB,QAAU,KAAK,KAAK,SAAS,MACvD,OAAOH,EAAM,WAAW,uBAEhC,CAAC,EAEG,KAAK,QAAQ,wBACb,KAAK,KAAK,YAAY,MAAQ,KAAK,QAAQ,YAC3C,KAAK,KAAK,MAAM,MAAQ,KAAK,QAAQ,MACrC,KAAK,KAAK,aAAa,MAAQ,KAAK,QAAQ,MAC5C,KAAK,KAAK,UAAU,EAAE,KAAKD,EAAQ,cAAc,EAEzD,CA9BU,YAAa,CAAE,OAAOG,EAAW,OAAS,CAgC3C,kBAAmB,CACxB,IAAIE,EAAQ,MAAM,iBAAiB,EACnC,GAAI,KAAK,QAAQ,sBAAuB,CACpC,IAAIA,KAAQ,aAAUA,CAAK,EAC3B,QAASC,KAAKD,EAAM,OAAOC,GAAKA,EAAE,MAAQ,YAAcA,EAAE,MAAQ,iBAAiB,EAC/EA,EAAE,QAAU,EAEpB,CACA,OAAOD,CACX,CAEA,aAAc,CACV,GAAK,KAAK,aAAa,EAIvB,KAAIE,EAAU,KAAK,aAAa,KAAK,EACrC,OAAOA,EAAQ,aACf,OAAOA,EAAQ,mBAEf,eAAY,CACR,OAAK,cAAW,kBAAkB,EAClC,QAASC,EAAAC,EAAA,GAAKF,GAAL,CAAc,sBAAuB,KAAK,QAAQ,qBAAsB,GACjF,UAAYG,GAA6B,CACrC,GAAIA,EAAS,mBAAoB,IAC7B,qBAAkB;AAAA;AAAA,oFACwE,IAAM,CAC5F,OAAO,SAAS,QAAO,cAAWA,EAAS,kBAAkB,CACjE,CAAC,EAED,MACJ,CAEIA,EAAS,mBACT,qBAAkBV,EAAQ,QAAS,IAAM,CACrC,OAAO,SAAS,QAAO,cAAW,IAAI,CAC1C,CAAC,EAGD,OAAO,SAAS,QAAO,cAAW,IAAI,CAE9C,CACJ,CAAC,EACL,CAEA,gBAAiB,CACb,IAAMW,EAAK,KAAK,YAAY,EAC5B,KAAK,QAAQ,MAAM,EAAE,OAAOC,EAAAC,EAAA,CACxB,UAAAD,EAACE,EAAA,EAAkB,EAEnBF,EAAC,OAAI,MAAM,cACP,UAAAA,EAAC,MAAG,MAAM,mBAAoB,SAAAZ,EAAQ,UAAU,EAChDY,EAAC,KAAE,GAAID,EAAG,SAAU,MAAM,cAAe,SAAAX,EAAQ,SAAS,EAE1DY,EAAC,QAAK,GAAID,EAAG,KAAM,OAAO,GAAG,aAAa,MACtC,UAAAC,EAAC,SAAM,aAAa,QAAQ,KAAK,SAAS,KAAK,OAAO,MAAM,gBAAgB,EAC5EA,EAAC,OAAI,GAAID,EAAG,aAAc,EAC1BC,EAAC,OAAI,MAAM,WACP,SAAAA,EAAC,UAAO,GAAID,EAAG,aAAc,KAAK,SAAS,MAAM,6BACzC,QAASP,GAAK,CAAEA,EAAE,eAAe,EAAG,KAAK,YAAY,CAAG,EAC3D,SAAAJ,EAAQ,aACb,EACJ,GACJ,GACJ,GACJ,CAAG,CACP,CACJ,EArGMD,EAAAD,EAAA",
  "names": ["import_corelib", "pageInit", "opt", "SignUpPanel", "__name", "myTexts", "Texts", "container", "SignUpForm", "e", "items", "x", "request", "__spreadProps", "__spreadValues", "response", "id", "jsx", "Fragment", "AccountPanelTitle"]
}
